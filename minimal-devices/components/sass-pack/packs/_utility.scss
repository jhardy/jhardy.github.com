
// A function to convert a px value to em. Takes an optional context variable
// to change the context.
//
// eg.  #box { width: pxtoem(20) }
//
// -----------------------------------------------------------------------------



@function pxtoem($px-value, $context: 16) {
  @return #{$px-value/$context}em;
}



// 2x retina image
// https://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
//
//  Modified to use compass image-width and image-height functions if a width and height
//  are not passed. Also re-factored into two separate mixins so can be used to generate
//  a media query for you or you can include this yourself inside your already defined
//  media queries.
// -----------------------------------------------------------------------------

@mixin image-2x($image, $width: false, $height: false) {
    @if $width == false {
        $width: image-width($image);
    }

    @if $height == false {
        $height: image-height($image);
    }

    background-image: url($image);
    background-size: $width $height;
}


@mixin image-2x-mq($image, $width: false, $height: false) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */

        @include image-2x($image, $width, $height);
    }
}




// Create an image block
//
// Uses compass image-width and image-height function
// creates a block element with an image as a the background
// -----------------------------------------------------------------------------

@mixin image-block($img, $display: false, $repeat: no-repeat) {
  @if $display {
    display: block;
  }

  width: image-width($img);
  height: image-height($img);
  background-image: image-url($img);
  background-repeat: $repeat;

}


// Mixin to convert from pixel to rem's with fallback for older browsers
//
// -----------------------------------------------------------------------------


@mixin font-size($size: 16, $fallback: true) {
  @if $fallback {
    font-size: $size * 1px;
  }

  font-size: ($size/16) * 1rem;
}

